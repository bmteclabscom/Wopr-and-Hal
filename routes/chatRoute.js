var express = require('express');
var router = express.Router();
var chatList;

//@params(Obj: io) passed in from server.js
var chatRouter = function (io) {

    //nice message to test chat route
    router.get('/', function (req, res, next) {
        res.send('hello');
    });

    //post route can be used to save post to DB if time allows
    router.post('/', function (req, res, next) {

        res.sendStatus(200);
    });

    /**
     * when user connects to a page with a io namespace of /chat
     * this will run automatically. All events sent to and from the client
     * is done inside the connection
     * @params(String: connection) built in event from socket.io
     * @params(Obj: socket) this is the client obj created by socket.io
    */
    io.on('connection', function (socket) {

        //sends to users once connected to a page
        socket.emit('load', { hello: 'hello from chat' });

        /**
         * listens for user when they connect,
         * then adds user to a room via socket property
         * @params(Int: data) room id from client
        */
        socket.on('load', function (data) {
            console.log(io.adapter.rooms[data]);
            
                socket.join(data);
            
        });

        //log the users connected to chat socket
        //id will be gibberish generated by socket.io
        for (var id in io.connected) {
            console.log(id);
        }

        /**
         * listens for when a new post is added
         * sends post back to front-end to be rendered on page
         * @params(obj: data) contains
         * @params(data: username) name of user posting
         * @params(data: roomID) id of chatroom
         * @params(data: msg) text content of post
         * @params(io.to("room")) to send data to specific room
        */
        socket.on('post', function (data) {
            console.log(data);
            //sends post back to users by roomID
            io.to(data.roomID).emit('new post', { msg: data.msg, userName: data.userName });
        });
    });

    //return router so it can be exported
    return router;

};//end of chatRouter

module.exports = chatRouter;